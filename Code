import sys
import os
import json
import random
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, QInputDialog, QMessageBox
)
from PyQt5.QtCore import Qt
import google.generativeai as genai

# Configuring Gemini API
API_KEY = "AIzaSyB3CTbV5xW_jkWMHpt_1hGYlw31QCZqnlI" 
genai.configure(api_key=API_KEY)
model = genai.GenerativeModel("gemini-1.5-flash")

# File to store flashcards
FLASHCARD_FILE = "flashcards.json"


def load_flashcards():
    """Load flashcards from a JSON file."""
    if os.path.exists(FLASHCARD_FILE):
        with open(FLASHCARD_FILE, "r") as f:
            return json.load(f)
    return {}


def save_flashcards(flashcards):
    """Save flashcards to a JSON file."""
    with open(FLASHCARD_FILE, "w") as f:
        json.dump(flashcards, f, indent=4)


def generate_flashcards_with_gemini(topic, num_questions):
    """
    Generate flashcards using Gemini API.
    """
    try:
        prompt = f"Generate {num_questions} flashcard-style question-answer pairs on the topic '{topic}'. Format it as 'Q: <question> A: <answer>'."
        response = model.generate_content(prompt)

        flashcards = {}
        q_and_a_pairs = response.text.split("Q:")
        for pair in q_and_a_pairs[1:]:
            question_answer = pair.split("A:")
            if len(question_answer) == 2:
                question = question_answer[0].strip()
                answer = question_answer[1].strip()
                if question and answer:
                    flashcards[question] = answer

        return flashcards
    except Exception as e:
        print(f"Error: {e}")
        return {}


class FlashcardApp(QWidget):
    def __init__(self):
        super().__init__()
        self.flashcards = load_flashcards()
        self.current_flashcard = None
        self.flashcards_list = []

        self.setWindowTitle("Flashcard App")
        self.setGeometry(100, 100, 400, 300)

        # Main layout
        self.layout = QVBoxLayout()
        self.menu_layout = QVBoxLayout()

        # Menu UI
        self.menu_label = QLabel("Flashcard App", self)
        self.menu_label.setAlignment(Qt.AlignCenter)
        self.menu_layout.addWidget(self.menu_label)

        self.add_menu_button("Add Flashcard", self.open_add_flashcard)
        self.add_menu_button("Review Flashcards", self.start_review)
        self.add_menu_button("Generate Flashcards", self.open_generate_flashcards)
        self.add_menu_button("Delete All Flashcards", self.delete_all_flashcards)
        self.add_menu_button("Exit", self.close)

        self.layout.addLayout(self.menu_layout)
        self.setLayout(self.layout)

    def add_menu_button(self, label, action):
        """Add a button to the main menu."""
        button = QPushButton(label, self)
        button.clicked.connect(action)
        self.menu_layout.addWidget(button)

    def open_add_flashcard(self):
        """Open a dialog to add a flashcard."""
        question, ok = QInputDialog.getText(self, "Add Flashcard", "Enter the question:")
        if ok and question.strip():
            answer, ok = QInputDialog.getText(self, "Add Flashcard", "Enter the answer:")
            if ok and answer.strip():
                self.flashcards[question.strip()] = answer.strip()
                save_flashcards(self.flashcards)
                QMessageBox.information(self, "Success", "Flashcard added successfully!")

    def start_review(self):
        """Start reviewing flashcards."""
        if not self.flashcards:
            QMessageBox.information(self, "No Flashcards", "No flashcards to review.")
            return

        self.flashcards_list = list(self.flashcards.items())
        random.shuffle(self.flashcards_list)
        self.current_flashcard = None
        self.show_next_flashcard()

    def show_next_flashcard(self):
        """Show the next flashcard."""
        if not self.flashcards_list:
            QMessageBox.information(self, "Done", "You have reviewed all flashcards!")
            return

        self.current_flashcard = self.flashcards_list.pop(0)
        question, _ = self.current_flashcard

        self.display_flashcard(question)

    def display_flashcard(self, question):
        """Display the flashcard with buttons to show answer or delete."""
        flashcard_dialog = QMessageBox(self)
        flashcard_dialog.setWindowTitle("Flashcard")
        flashcard_dialog.setText(f"Q: {question}")

        # Add buttons
        delete_button = flashcard_dialog.addButton("Delete Flashcard", QMessageBox.ActionRole)
        yes_button = flashcard_dialog.addButton("Show Answer", QMessageBox.YesRole)
        no_button = flashcard_dialog.addButton("Skip", QMessageBox.NoRole)

        # Execute dialog and handle results
        flashcard_dialog.exec_()

        if flashcard_dialog.clickedButton() == delete_button:
            self.delete_flashcard()
        elif flashcard_dialog.clickedButton() == yes_button:
            self.show_answer()
        elif flashcard_dialog.clickedButton() == no_button:
            self.show_next_flashcard()

    def show_answer(self):
        """Show the answer to the current flashcard."""
        if not self.current_flashcard:
            return

        _, answer = self.current_flashcard
        QMessageBox.information(self, "Answer", f"A: {answer}")
        self.show_next_flashcard()

    def delete_flashcard(self):
        """Delete the current flashcard."""
        if self.current_flashcard:
            question = self.current_flashcard[0]
            del self.flashcards[question]
            save_flashcards(self.flashcards)
            QMessageBox.information(self, "Success", f"Flashcard '{question}' deleted.")
            self.show_next_flashcard()

    def delete_all_flashcards(self):
        """Delete all flashcards."""
        confirm = QMessageBox.question(self, "Confirm Delete", "Are you sure you want to delete all flashcards?",
                                       QMessageBox.Yes | QMessageBox.No)
        if confirm == QMessageBox.Yes:
            self.flashcards.clear()
            save_flashcards(self.flashcards)
            QMessageBox.information(self, "Success", "All flashcards have been deleted.")

    def open_generate_flashcards(self):
        """Open a dialog to generate flashcards."""
        topic, ok = QInputDialog.getText(self, "Generate Flashcards", "Enter the topic:")
        if not ok or not topic.strip():
            return

        num_questions, ok = QInputDialog.getInt(self, "Generate Flashcards", "Enter the number of questions:", 5, 1, 20)
        if not ok:
            return

        QMessageBox.information(self, "Generating", "Generating flashcards... Please wait.")
        generated_flashcards = generate_flashcards_with_gemini(topic.strip(), num_questions)

        if generated_flashcards:
            self.flashcards.update(generated_flashcards)
            save_flashcards(self.flashcards)
            QMessageBox.information(self, "Success", f"{len(generated_flashcards)} flashcards generated and saved!")
        else:
            QMessageBox.warning(self, "Error", "Failed to generate flashcards. Please try again.")


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = FlashcardApp()
    window.show()
    sys.exit(app.exec_())
